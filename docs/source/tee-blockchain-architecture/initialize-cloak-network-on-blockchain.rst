=======================================
Initialize Cloak Network on Blockchain
=======================================

A cloak service includes four components, they are listed below:

* cloak-tee: the core component, which is a `CCF <https://github.com/microsoft/CCF>`__ app that runs in TEE environment,
  deals with Ethereum and cloak transaction from users and synchronizes the results to blockchain.
* cloak-tee-agent: as described above, cloak-tee runs in SGX Enclave(TEE), it is inconvenient to 
  communicate with real world (blockchain, file system, etc.), so cloak-tee-agent is the untrusted 
  part that reads cloak-tee log file and communicates with outside.
* PKI Contract: provide the service get PK from address for encryption and decryption.
* cloak service contract: provide some useful functions that include tee address register, 
  verification of synchronization.

deploy PKI and  cloak service contract
***************************************
The two contracts is be generated by Cloak compiler, so you need to install compiler, see: 
`Installation <https://oxhainan-cloak-docs.readthedocs-hosted.com/en/latest/started/quick-start.html#installation>`__

They are stardard Solidity contracts, you can use web3 to deploy them, or any way what you want. 
Cloak compiler provide two commands to deploy them, you can use it too, for examples(ethereum network is ganache, you can change it depend on your need):

.. code::

     python cloak/__main__.py deploy-pki <SENDER ADDRESS> --blockchain-backend w3-ganache --blockchain-node-uri http://127.0.0.1:8545
     python cloak/__main__.py deploy-service <SENDER ADDRESS> --blockchain-backend w3-ganache --blockchain-node-uri http://127.0.0.1:8545

deploy cloak-tee
**********************
cloak-tee is a CCF app, compile and run it just like a stardard CFF app.

first of all, you need a CCF-0.15.2 environment, see: `CCF Development Setup <https://microsoft.github.io/CCF/main/build_apps/build_setup.html>`__, but it is complicated, so we recommend you use Dcoker setup it:

.. code-block::

   docker pull plytools/circleci-cloak-tee:v0.2.0

get cloak-tee code in Docker:

.. code-block::

    git clone https://github.com/OxHainan/cloak-tee.git
    cd cloak-tee

build:

.. code-block::

    mkdir build && cd build
    cmake .. -GNinja
    ninja

run:

.. code-block::

    /opt/ccf-0.15.2/bin/sandbox.sh -p libevm4ccf.virtual.so

deploy cloak-tee-agent
*****************************
after run cloak-tee, the next step is to setup cloak-tee-agent, cloak-tee-agent requires python 3.8 or greater version, install dependencies:

.. code-block::

   pip install -r requirements.txt

setup:

.. code-block::

   python src/main.py <log file of cloak-tee>

if you use sandbox.sh setup the cloak-tee, the path of log file is workerspace/sandbox_0/out under cloak-tee directory.

prepare cloak-tee and use cloak-tee
************************************
Though cloak-tee has been running, it is not ready for process transaction, it need to get the PKI/cloak service contract address, generate the tee SK, register tee address to cloak service, etc. so we has to send a prepare request to cloak-tee, let it finish that things.

As described above, cloak-tee is a CCF app, so a request to cloak-tee is a stardard JRPC request, so you can use curl or anything else to request cloak-tee, see:`use apps <https://microsoft.github.io/CCF/main/use_apps/index.html>`__, And we provide `cloak-client <https://github.com/OxHainan/cloak-client>`__ as a SDK, use it may be the best choice.

Here is a example using ccf-client to prepare cloak-tee:

.. code-block::

   ccf_client = ccf.clients.CCFClient(<HOST>, <PORT>, <CA_PATH>, <CERT_PATH>, <KEY_PATH>)
   ccf_client.call("/app/cloak_prepare", {"cloak_service_addr": <cloak_service_addr>, "pki_addr": <pki_addr>})

after prepare process done, cloak service is ready.
